// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid(4))
  firstname String
  lastname String?
  username String @unique
  password String
  email String @unique
  isAdmin Boolean @default(false)
  address_street1 String?
  address_street2 String?
  address_city String?
  address_state String?
  address_country String?
  address_zipcode Int?
  reviews Review[]
  payment_methods PaymentMethod[]
  wishlists Wishlist[]
  cartItems CartItem[]
  orders Order[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Product {
  id String @id @default(uuid(4))
  name String
  description String
  price Decimal @db.Decimal(10,2)
  quantity Int
  skuId String @unique
  tags Tag[]
  categories Category[]
  reviews Review[]
  wishlists Wishlist[]
  cartItems CartItem[]
  orders Order[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Category {
  id String @id @default(uuid(4))
  name String
  product Product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_id String
  @@unique([name, product_id])
}

model Tag {
  id String @id @default(uuid(4))
  name String
  product Product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_id String
  @@unique([name, product_id])
}

model Review {
  id String @id @default(uuid(4))
  text String
  rating Float
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id String
  user User @relation(fields: [user_name], references: [username], onDelete: SetDefault, onUpdate: Cascade)
  user_name String @default("Anonymous")
  @@unique([user_name, product_id])
}

model PaymentMethod {
  id String @id @default(uuid(4))
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String
  type PaymentType
  payment_number Int
  expiry DateTime
  security String
  orders Order[]
}

enum PaymentType {
  CreditCard
  DebitCard
  Stripe
  Paypal
}

model Wishlist {
  id String @id @default(uuid(4))
  name String
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model CartItem {
  id String @id @default(uuid(4))
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id String
  quantity Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Order {
  id String @id @default(uuid(4))
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id String
  quantity Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  payment PaymentMethod @relation(fields: [paymentMethod_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  paymentMethod_id String
}